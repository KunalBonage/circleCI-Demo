# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
orbs:
  aws-s3: circleci/aws-s3@3.0.0
jobs:
  # Sample build task
  build:
    parameters: # parameters are at the job level
      env:
        type: string
    docker:
      - image: cimg/node:15.1
    working_directory: ~/project
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run: npm install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run: ~/project/node_modules/.bin/env-cmd -f .env.<<parameters.env>> npm run build
      - run: npm test
      - run:
          name: current environment check
          command: echo << parameters.env >>
      - run: # print the name of the branch we're on
          name: "branch name"
          command: echo ${CIRCLE_BRANCH}
      - persist_to_workspace:
          root: ~/project
          paths:
          - "*"
  deploy:
    parameters: # parameters are at the job level
      env:
        type: string
    docker:
      - image: cimg/node:15.1
    steps:
      - attach_workspace:
          at: .
      - run: npm install surge
      - run: ls -l
      - aws-s3/copy:
          arguments: '--recursive'
          from: ~/project/build
          to: 's3://react-app-deployment'
      # - run: ~/project/node_modules/.bin/surge --project ~/project/build --domain testCI-<< parameters.env >>.surge.sh
workflows:
  version: 2
  build-deploy:
    jobs:
      - build:
          name: build-staging
          env: staging
          filters:
            branches:
              only: staging          
      - build:
          name: build-prod
          env: production
          filters:
            branches:
              only: master          
      - deploy:
          name: deploy-staging        
          env: staging
          requires:
            - build-staging
          filters:
            branches:
              only: staging
      - deploy:
          name: deploy-prod        
          env: production
          requires:
            - build-prod
          filters:
            branches:
              only: master
