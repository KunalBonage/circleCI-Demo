# version: 2.1

# orbs:
#   aws-s3: circleci/aws-s3@3.0.0
  
# jobs:
#   quality_checks:
#     docker: 
#       - image: cimg/node:15.1
#     steps:
#       - run: echo in quality checks
#     docker: 
#   build:
#       - image: cimg/node:15.1
#     working_directory: ~/project
#     parameters:
#       env: 
#         type: string
#     steps:
#       - run: echo build > build.txt
#       - persist_to_workspace:
#           root: ~/project
#           paths:
#             - '*'
#   deploy:
#     docker: 
#       - image: cimg/node:15.1
#     parameters:
#       env: 
#         type: string
#     steps:
#       - attach_workspace:
#           at: .
#       - run: 
#           name: deploy build
#           command: |
#             echo deploy << parameters.env >>
#             cat build.txt

# workflows:
#   build_QA:
#     jobs:
#       - quality_checks
#       - build:
#           env: QA
#           requires:
#             - quality_checks
#           filters:
#            branches: 
#              only: 
#               - master
#               - staging
#       - hold-deploy:
#           type: approval
#           requires:
#             - build
#       - deploy:
#           env: QA
#           filters:
#             branches:
#               only: 
#                 - master
#                 - staging
#           requires:
#             - hold-deploy





# version: 2.1

# jobs:
#   build:
#     docker:
#       - image: cimg/node:15.1
#     working_directory: ~/repo
#     parameters: 
#       env:
#         type: string
#     steps:
#       - run: echo build
#       - persist_to_workspace:
#           root: ~/repo
#           paths: /.*/   # ~/home/circleci/repo
#   deploy:
#       docker:
#         - image: cimg/node:15.1
#       steps:
#         - attach_workspace:
#             at: .
#         - run: echo in deploy job
        
# workflows:
#   build_testAndDeploy:
#     jobs:
#       - build:
#           env: QA
#       - hold_for_approval:
#           type: approval
#           requires: 
#             - build
#       - deploy:
#           requires:
#             - build
#           filters:
#             branches:
#               only:
#                 - master
#             tags:
#               ignore: /.*/


# version: 2.1

# jobs:
#   build:
#     docker:
#       - image: cimg/node:15.1
#     working_directory: ~/project # ~/ refers to /home/circleci
#     parameters:
#       env:
#         type: string
#     steps:
#       - checkout
#       - run: npm install
#       - run: npm run test
#       - run: ~/project/node_modules/.bin/env-cmd -f  .env.<<parameters.env>> npm run build
#       - run: cp build/index.html build/200.html
#       - persist_to_workspace:
#           root: ~/project
#           paths: "build"
#   deploy-feature-review:
#     docker:
#       - image: cimg/node:15.1
#     steps:
#       - attach_workspace:
#           at: .
#       - run: 
#           name: Install surge and deploy to surge
#           command: |
#             npm install surge
#             ~/project/node_modules/.bin/surge --project build/ --domain ci-01-demo.surge.sh

# workflows:
#   build_deploy_review:
#     jobs:
#       - build:
#           env: staging
#           filters:
#             branches:
#               ignore: /.*/
#             tags:
#               only: /^feature/review/.*/
#       - deploy-approval:
#           type: approval
#           requires: 
#             - build
#           filters:            
#             branches:
#               ignore: /.*/
#             tags:
#               only: /^feature/review/.*/          
#       - deploy-feature-review:
#           requires: 
#             - deploy-approval
#           filters:
#             branches:
#               ignore: /.*/
#             tags:
#               only: /^feature/review/.*/
    
version: 2.1

orbs:
  aws-s3: circleci/aws-s3@3.0.0

jobs:
  build:
    docker:
      - image: cimg/node:15.1
    working_directory: ~/project
    parameters:
      env:
        type: string
    steps: 
      - checkout
      - run: 
          name: 'build app'
          command: |
            npm install
            ~/project/node_modules/.bin/env-cmd -f .env.<< parameters.env >> npm run build
      - persist_to_workspace:
          root: ~/project
          paths: build
  deploy:
    docker:
      - image: cimg/node:15.1
    parameters:
      env:
        type: string
    steps:
      - attach_workspace:
         at: .
      - run: npx surge --project ~/project/build --domain testCI<< parameters.env >>.surge.sh
      - run: 
          name: print env name
          command: echo << parameters.env >>
  deploy_prod:
    docker:
      - image: cimg/node:15.1
    parameters:
      env:
        type: string
    steps:
      - attach_workspace:
         at: .    
      - aws-s3/copy:
          arguments: '--recursive'
          from: '~/project/build'
          to: 's3://react-app-deployments'
      - run: 
          name: Invalidate Cloudfront Cache
          command: aws cloudfront create-invalidation --distribution-id ${AWS_CLOUDFRONT__DISTRIBUTION_ID} --paths /\*
workflows:
  build-and-deploy:
    jobs:
      - build:
          name: "build_QA"
          env: qa
          filters:
            branches:
              only:
                master
            tags:
              ignore:
                /.*/
      - build:
          name: "build_PROD"
          env: production
          filters:
            branches:
              ignore:
                /.*/
            tags:
              only:
                /^production-release.*/
                /^production-deploy.*/
      - hold-for-approval:
          type: approval
          requires:
            - build_PROD
          filters:
            branches:
              ignore:
                /.*/
            tags:
              only:
                /^production-release.*/
                /^production-deploy.*/
      - deploy:
          name: deploy_QA
          env: qa      
          requires:
            - hold-for-approval
          filters:
            branches:
              only:
                master
            tags:
              ignore:
                /.*/
      - deploy_prod:
          env: production
          requires:
            - hold-for-approval
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                /^production-release.*/
                /^production-deploy.*/



